
services:
  # ===== PostgreSQL =====
  db:
    image: postgres:15
    container_name: news_postgres
    restart: always
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - news-network

  # ===== Redis Cache =====
  redis:
    image: redis:7-alpine
    container_name: news_redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - news-network

  # ===== Backend FastAPI =====
  backend:
    container_name: news_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      bash -c "
      echo '⏳ Esperando Postgres...' &&
      until pg_isready -h db -p 5432 -U ${POSTGRES_USER}; do sleep 1; done &&
      echo '⏳ Esperando Redis...' &&
      until redis-cli -h redis ping > /dev/null 2>&1; do sleep 1; done &&
      echo '✅ Servicios listos!' &&
      echo '🚀 Iniciando FastAPI...' &&
      uvicorn main:app --host 0.0.0.0 --port 9000 --reload
      "
    volumes:
      - ./backend/app:/app:cached
      - ./backend/pyproject.toml:/app/pyproject.toml:ro
    ports:
      - "${BACKEND_PORT:-9000}:9000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
    working_dir: /app
    networks:
      - news-network

  # ===== Frontend Angular ===== (AGREGAR ESTO)
  frontend:
    container_name: news_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm start
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    ports:
      - "4300:4300"
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    networks:
      - news-network

volumes:
  postgres_data:
  redis_data:

networks:
  news-network:
    driver: bridge